LIB "../lib/new_autmds.lib";

intmat Q[1][5] = 2,4,3,3,1;

ring R = 0,T(1..5),dp;

// attach Q to R:
setBaseMultigrading(Q); 

ideal I = T(1)*T(2) + T(3)*T(4) + T(5)^6;

list TOR;
def S = autCox(I, TOR);
setring S;

ideal J = Jexported;
J;

"__";
stabExported;

"__shrink";
def Small = shrink(J);
setring Small;
ideal J = Ishrink;

"_____dim, comps";
dim(std(J));

def U = absPrimdecGTZ(J);
setring U;  
absolute_primes; 

quit;















def S = caut(I);
setring S;


ideal I2 = Jexported;
I2;

list L = Lexported;
matrix A = L[1];
string labels = L[2];

// dim(std(I2));
printAuts(A, labels, 5, I2);


// for components:
// create smaller ring:
def Small = shrink(I2);
setring Small;
ideal I3 = Ishrink;
I3;

 dim(std(I3));


// 2
def U = absPrimdecGTZ(I3);
setring U;  absolute_primes; 


